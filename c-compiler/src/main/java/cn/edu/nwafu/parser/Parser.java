/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package cn.edu.nwafu.parser;

import cn.edu.nwafu.ast.*;
import cn.edu.nwafu.type.*;
import java.util.*;
import cn.edu.nwafu.utils.ErrorHandler;

public class Parser implements ParserConstants {

        private String sourceName = "";
        private LibraryLoader loader;
        private ErrorHandler errorHandler;
        private Set<String> knownTypedefs;

    public static void main ( String[] args  ) throws ParseException
    {
          Parser parser ;

          parser = new Parser(Parser.class.getClassLoader().getResourceAsStream("cfile/simple_def.c"));
//          Token nextToken = parser.getNextToken();
//          while (nextToken != null && !nextToken.image.equals(""))
//          {
//              System.out.println(nextToken);
//              nextToken = parser.getNextToken();
//          }
        ExprNode expr = parser.expr();
        expr.dump(System.out);
    }

    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = integerValue(image);
        if (image.endsWith("UL")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
        }
        else if (image.endsWith("L")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
        }
        else if (image.endsWith("U")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
        }
        else {
            return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
        }
    }

    /**
    * 处理各种(2进制，8进制，整形，长整形)数字，返回他们的具体值
    */
    private long integerValue(String image)
    {
        String s = image.replaceFirst("[UL]+", "");
        if (s.startsWith("0x") || s.startsWith("0X")) {
            return Long.parseLong(s.substring(2), 16);
        }
        else if (s.startsWith("0") && !s.equals("0")) {
            return Long.parseLong(s.substring(1), 8);
        }
        else {
            return Long.parseLong(s, 10);
        }
    }

     private long characterCode(String image) throws ParseException
     {
            String s = stringValue(image);
            if (s.length() != 1) {
                throw new Error("must not happen: character length > 1");
            }
            return (long)s.charAt(0);
     }

     private String stringValue(String _image) throws ParseException
     {
             int pos = 0;
             int idx;
             StringBuffer buf = new StringBuffer();
             String image = _image.substring(1, _image.length() - 1);

             while ((idx = image.indexOf("\\", pos)) >= 0) {
                 buf.append(image.substring(pos, idx));
                 if (image.length() >= idx + 4
                         && Character.isDigit(image.charAt(idx+1))
                         && Character.isDigit(image.charAt(idx+2))
                         && Character.isDigit(image.charAt(idx+3))) {
                     buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                     pos = idx + 4;
                 }
                 else {
                     buf.append(unescapeSeq(image.charAt(idx+1)));
                     pos = idx + 2;
                 }
             }
             if (pos < image.length()) {
                 buf.append(image.substring(pos, image.length()));
             }
             return buf.toString();
     }


         private static final int charMax = 255;

     private char unescapeOctal(String digits) throws ParseException {
         int i = Integer.parseInt(digits, 8);
         if (i > charMax) {
             throw new ParseException(
                 "octal character sequence too big: \\" + digits);
         }
         return (char)i;
     }

     private static final char bell = 7;
     private static final char backspace = 8;
     private static final char escape = 27;
     private static final char vt = 11;

     private char unescapeSeq(char c) throws ParseException
     {
         switch (c) {
         case '0': return '\0';
         case '"': return '"';
         case '\'': return '\'';
         case 'a': return bell;
         case 'b': return backspace;
         case 'e': return escape;
         case 'f': return '\f';
         case 'n': return '\n';
         case 'r': return '\r';
         case 't': return '\t';
         case 'v': return vt;
         default:
             throw new ParseException("unknown escape sequence: \"\\" + c);
         }
     }

    protected Location location(Token t)
    {
            return new Location(sourceName, t);
    }


    private void addKnownTypedefs(List<TypedefNode> typedefs)
    {
        for (TypedefNode n : typedefs) {
            addType(n.name());
        }
    }

    private void addType(String name)
    {
        knownTypedefs.add(name);
    }

    private boolean isType(String name)
    {
        return knownTypedefs.contains(name);
    }

    private TypeRef size_t()
    {
        return IntegerTypeRef.ulongRef();
    }

  final public ExprNode expr() throws ParseException {ExprNode lhs, rhs, expr;
    String op;
    if (jj_2_1(2147483647)) {
      lhs = term();
      jj_consume_token(44);
      rhs = expr();
{if ("" != null) return new AssignNode(lhs, rhs);}
    } else if (jj_2_2(2147483647)) {
      lhs = term();
      op = opassign_op();
      rhs = expr();
{if ("" != null) return new OpAssignNode(lhs, op, rhs);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 67:
      case 70:
      case 71:
      case 72:
      case 77:
      case 81:
      case 82:
      case 83:
      case 84:{
        expr = expr10();
{if ("" != null) return expr;}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String opassign_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
{if ("" != null) return "+";}
      break;
      }
    case 46:{
      jj_consume_token(46);
{if ("" != null) return "-";}
      break;
      }
    case 47:{
      jj_consume_token(47);
{if ("" != null) return "*";}
      break;
      }
    case 48:{
      jj_consume_token(48);
{if ("" != null) return "/";}
      break;
      }
    case 49:{
      jj_consume_token(49);
{if ("" != null) return "%";}
      break;
      }
    case 50:{
      jj_consume_token(50);
{if ("" != null) return "&";}
      break;
      }
    case 51:{
      jj_consume_token(51);
{if ("" != null) return "|";}
      break;
      }
    case 52:{
      jj_consume_token(52);
{if ("" != null) return "^";}
      break;
      }
    case 53:{
      jj_consume_token(53);
{if ("" != null) return "<<";}
      break;
      }
    case 54:{
      jj_consume_token(54);
{if ("" != null) return ">>";}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr10() throws ParseException {ExprNode c, t, e;
    c = expr9();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      t = expr();
      jj_consume_token(56);
      e = expr10();
{if ("" != null) return new CondExprNode(c, t, e);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr9() throws ParseException {ExprNode l, r;
    l = expr8();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(57);
      r = expr8();
l = new LogicalOrNode(l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr8() throws ParseException {ExprNode l, r;
    l = expr7();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(58);
      r = expr7();
l = new LogicalAndNode(l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr7() throws ParseException {ExprNode l, r;
    l = expr6();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        jj_consume_token(59);
        r = expr6();
l = new BinaryOpNode(l, ">", r);
        break;
        }
      case 60:{
        jj_consume_token(60);
        r = expr6();
l = new BinaryOpNode(l, "<", r);
        break;
        }
      case 61:{
        jj_consume_token(61);
        r = expr6();
l = new BinaryOpNode(l, ">=", r);
        break;
        }
      case 62:{
        jj_consume_token(62);
        r = expr6();
l = new BinaryOpNode(l, "<=", r);
        break;
        }
      case 63:{
        jj_consume_token(63);
        r = expr6();
l = new BinaryOpNode(l, "==", r);
        break;
        }
      case 64:{
        jj_consume_token(64);
        r = expr6();
l = new BinaryOpNode(l, "!=", r);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr6() throws ParseException {ExprNode l, r;
    l = expr5();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 65:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(65);
      r = expr5();
l = new BinaryOpNode(l, "|", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr5() throws ParseException {ExprNode l, r;
    l = expr4();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 66:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(66);
      r = expr4();
l = new BinaryOpNode(l, "^", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr4() throws ParseException {ExprNode l, r;
    l = expr3();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(67);
      r = expr3();
l = new BinaryOpNode(l, "&", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr3() throws ParseException {ExprNode l, r;
    l = expr2();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 68:
      case 69:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 68:{
        jj_consume_token(68);
        r = expr2();
l = new BinaryOpNode(l, ">>", r);
        break;
        }
      case 69:{
        jj_consume_token(69);
        r = expr2();
l = new BinaryOpNode(l, "<<", r);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr2() throws ParseException {ExprNode l, r;
    l = expr1();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 70:
      case 71:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 70:{
        jj_consume_token(70);
        r = expr1();
l = new BinaryOpNode(l, "+", r);
        break;
        }
      case 71:{
        jj_consume_token(71);
        r = expr1();
l = new BinaryOpNode(l, "-", r);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public ExprNode expr1() throws ParseException {ExprNode l, r;
    l = term();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 72:
      case 73:
      case 74:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 72:{
        jj_consume_token(72);
        r = term();
l = new BinaryOpNode(l, "*", r);
        break;
        }
      case 73:{
        jj_consume_token(73);
        r = term();
l = new BinaryOpNode(l, "/", r);
        break;
        }
      case 74:{
        jj_consume_token(74);
        r = term();
l = new BinaryOpNode(l, "%", r);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  final public TypeNode type() throws ParseException {TypeRef ref;
    ref = typeref();
{if ("" != null) return new TypeNode(ref);}
    throw new Error("Missing return statement in function");
}

  final public TypeRef typeref() throws ParseException {TypeRef ref;
    Token t;
    ParamTypeRefs params;
    ref = typeref_base();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 72:
      case 75:
      case 77:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      if (jj_2_3(2)) {
        jj_consume_token(75);
        jj_consume_token(76);
ref = new ArrayTypeRef(ref);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 75:{
          jj_consume_token(75);
          t = jj_consume_token(INTEGER);
          jj_consume_token(76);
ref = new ArrayTypeRef(ref, integerValue(t.image));
          break;
          }
        case 72:{
          jj_consume_token(72);
ref = new PointerTypeRef(ref);
          break;
          }
        case 77:{
          jj_consume_token(77);
          params = param_typerefs();
          jj_consume_token(78);
ref = new FunctionTypeRef(ref, params);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return ref;}
    throw new Error("Missing return statement in function");
}

  final public ParamTypeRefs param_typerefs() throws ParseException {ParamTypeRefs params;
    if (jj_2_4(2147483647)) {
      jj_consume_token(VOID);
{if ("" != null) return new ParamTypeRefs(new ArrayList<TypeRef>());}
    } else if (jj_2_5(1)) {
      params = fixedparam_typerefs();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 79:{
        jj_consume_token(79);
        jj_consume_token(80);
params.acceptVarargs();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
{if ("" != null) return params;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ParamTypeRefs fixedparam_typerefs() throws ParseException {List<TypeRef> refs = new ArrayList<TypeRef>();
    TypeRef ref;
    ref = typeref();
refs.add(ref);
    label_11:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(79);
      ref = typeref();
refs.add(ref);
    }
{if ("" != null) return new ParamTypeRefs(refs);}
    throw new Error("Missing return statement in function");
}

  final public TypeRef typeref_base() throws ParseException {Token t, name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      t = jj_consume_token(VOID);
{if ("" != null) return new VoidTypeRef(location(t));}
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
{if ("" != null) return IntegerTypeRef.charRef(location(t));}
      break;
      }
    case SHORT:{
      t = jj_consume_token(SHORT);
{if ("" != null) return IntegerTypeRef.shortRef(location(t));}
      break;
      }
    case INT:{
      t = jj_consume_token(INT);
{if ("" != null) return IntegerTypeRef.intRef(location(t));}
      break;
      }
    case LONG:{
      t = jj_consume_token(LONG);
{if ("" != null) return IntegerTypeRef.longRef(location(t));}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      if (jj_2_7(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(CHAR);
{if ("" != null) return IntegerTypeRef.ucharRef(location(t));}
      } else if (jj_2_8(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(SHORT);
{if ("" != null) return IntegerTypeRef.ushortRef(location(t));}
      } else if (jj_2_9(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(INT);
{if ("" != null) return IntegerTypeRef.uintRef(location(t));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(LONG);
{if ("" != null) return IntegerTypeRef.ulongRef(location(t));}
          break;
          }
        case STRUCT:{
          t = jj_consume_token(STRUCT);
          name = jj_consume_token(IDENTIFIER);
{if ("" != null) return new StructTypeRef(location(t), name.image);}
          break;
          }
        case UNION:{
          t = jj_consume_token(UNION);
          name = jj_consume_token(IDENTIFIER);
{if ("" != null) return new UnionTypeRef(location(t), name.image);}
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          if (isType(getToken(1).image)) {
            name = jj_consume_token(IDENTIFIER);
{if ("" != null) return new UserTypeRef(location(name), name.image);}
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
}

//  表达式，包含类型转换
  final public ExprNode term() throws ParseException {TypeNode t;
    ExprNode n;
    if (jj_2_10(2147483647)) {
      jj_consume_token(77);
      t = type();
      jj_consume_token(78);
      n = term();
{if ("" != null) return new CastNode(t, n);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 67:
      case 70:
      case 71:
      case 72:
      case 77:
      case 81:
      case 82:
      case 83:
      case 84:{
        n = unary();
{if ("" != null) return n;}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// 表达式
  final public ExprNode unary() throws ParseException {ExprNode n;
    TypeNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 81:{
      jj_consume_token(81);
      n = unary();
{if ("" != null) return new PrefixOpNode("++", n);}
      break;
      }
    case 82:{
      jj_consume_token(82);
      n = unary();
{if ("" != null) return new PrefixOpNode("--", n);}
      break;
      }
    case 70:{
      jj_consume_token(70);
      n = term();
{if ("" != null) return new UnaryOpNode("+", n);}
      break;
      }
    case 71:{
      jj_consume_token(71);
      n = term();
{if ("" != null) return new UnaryOpNode("-", n);}
      break;
      }
    case 83:{
      jj_consume_token(83);
      n = term();
{if ("" != null) return new UnaryOpNode("!", n);}
      break;
      }
    case 84:{
      jj_consume_token(84);
      n = term();
{if ("" != null) return new UnaryOpNode("~", n);}
      break;
      }
    case 72:{
      jj_consume_token(72);
      n = term();
{if ("" != null) return new DereferenceNode(n);}
      break;
      }
    case 67:{
      jj_consume_token(67);
      n = term();
{if ("" != null) return new AddressNode(n);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_11(3)) {
        jj_consume_token(SIZEOF);
        jj_consume_token(77);
        t = type();
        jj_consume_token(78);
{if ("" != null) return new SizeofTypeNode(t, size_t());}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:{
          jj_consume_token(SIZEOF);
          n = unary();
{if ("" != null) return new SizeofExprNode(n, size_t());}
          break;
          }
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 77:{
          n = postfix();
{if ("" != null) return n;}
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

//  运算符  + 运算对象
  final public ExprNode postfix() throws ParseException {ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
    expr = primary();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 75:
      case 77:
      case 81:
      case 82:
      case 85:
      case 86:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 81:{
        jj_consume_token(81);
expr = new SuffixOpNode("++", expr);
        break;
        }
      case 82:{
        jj_consume_token(82);
expr = new SuffixOpNode("--", expr);
        break;
        }
      case 75:{
        jj_consume_token(75);
        idx = expr();
        jj_consume_token(76);
expr = new ArefNode(expr, idx);
        break;
        }
      case 85:{
        jj_consume_token(85);
        memb = name();
expr = new MemberNode(expr, memb);
        break;
        }
      case 86:{
        jj_consume_token(86);
        memb = name();
expr = new PtrMemberNode(expr, memb);
        break;
        }
      case 77:{
        jj_consume_token(77);
        args = args();
        jj_consume_token(78);
expr = new FuncallNode(expr, args);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public String name() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public List<ExprNode> args() throws ParseException {List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIZEOF:
    case IDENTIFIER:
    case INTEGER:
    case CHARACTER:
    case STRING:
    case 67:
    case 70:
    case 71:
    case 72:
    case 77:
    case 81:
    case 82:
    case 83:
    case 84:{
      arg = expr();
args.add(arg);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 79:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_13;
        }
        jj_consume_token(79);
        arg = expr();
args.add(arg);
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

//数值、字符、字符串的字面量、变量以及用括号括起来的表达式中的任意一者
  final public ExprNode primary() throws ParseException {Token t;
    ExprNode n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      t = jj_consume_token(INTEGER);
{if ("" != null) return integerNode(location(t), t.image);}
      break;
      }
    case CHARACTER:{
      t = jj_consume_token(CHARACTER);
{if ("" != null) return new IntegerLiteralNode(location(t),
                                          IntegerTypeRef.charRef(),
                                          characterCode(t.image));}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new StringLiteralNode(location(t),
                new PointerTypeRef(IntegerTypeRef.charRef()),
                stringValue(t.image));}
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new VariableNode(location(t), t.image);}
      break;
      }
    case 77:{
      jj_consume_token(77);
      n = expr();
      jj_consume_token(78);
{if ("" != null) return n;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_expr3_364_17_106()
 {
    if (jj_scan_token(68)) return true;
    if (jj_3R_expr2_375_5_102()) return true;
    return false;
  }

  private boolean jj_3R_expr3_364_17_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr3_364_17_106()) {
    jj_scanpos = xsp;
    if (jj_3R_expr3_365_17_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_expr2_375_5_102()
 {
    if (jj_3R_expr1_386_5_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr2_375_17_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_args_564_7_79()
 {
    if (jj_3R_expr_261_7_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_args_565_8_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_args_564_5_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_args_564_7_79()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_expr4_355_16_101()
 {
    if (jj_scan_token(67)) return true;
    if (jj_3R_expr3_364_5_100()) return true;
    return false;
  }

  private boolean jj_3R_expr3_364_5_100()
 {
    if (jj_3R_expr2_375_5_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr3_364_17_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_name_555_5_74()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_expr5_346_16_99()
 {
    if (jj_scan_token(66)) return true;
    if (jj_3R_expr4_355_5_98()) return true;
    return false;
  }

  private boolean jj_3R_expr4_355_5_98()
 {
    if (jj_3R_expr3_364_5_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr4_355_16_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_postfix_544_7_71()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_args_564_5_75()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_postfix_543_7_70()
 {
    if (jj_scan_token(86)) return true;
    if (jj_3R_name_555_5_74()) return true;
    return false;
  }

  private boolean jj_3R_postfix_542_7_69()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_name_555_5_74()) return true;
    return false;
  }

  private boolean jj_3R_postfix_541_7_68()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_expr_261_7_73()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_postfix_540_7_67()
 {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_postfix_539_7_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_postfix_539_7_66()) {
    jj_scanpos = xsp;
    if (jj_3R_postfix_540_7_67()) {
    jj_scanpos = xsp;
    if (jj_3R_postfix_541_7_68()) {
    jj_scanpos = xsp;
    if (jj_3R_postfix_542_7_69()) {
    jj_scanpos = xsp;
    if (jj_3R_postfix_543_7_70()) {
    jj_scanpos = xsp;
    if (jj_3R_postfix_544_7_71()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_postfix_539_7_66()
 {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3R_expr6_337_16_91()
 {
    if (jj_scan_token(65)) return true;
    if (jj_3R_expr5_346_5_90()) return true;
    return false;
  }

  private boolean jj_3R_postfix_538_5_56()
 {
    if (jj_3R_primary_578_7_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_postfix_539_7_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expr5_346_5_90()
 {
    if (jj_3R_expr4_355_5_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr5_346_16_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expr7_328_17_97()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr7_327_17_96()
 {
    if (jj_scan_token(63)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr7_326_17_95()
 {
    if (jj_scan_token(62)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr7_325_17_94()
 {
    if (jj_scan_token(61)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr6_337_5_88()
 {
    if (jj_3R_expr5_346_5_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr6_337_16_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_unary_526_7_52()
 {
    if (jj_3R_postfix_538_5_56()) return true;
    return false;
  }

  private boolean jj_3R_expr7_324_17_93()
 {
    if (jj_scan_token(60)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr7_323_17_92()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_expr6_337_5_88()) return true;
    return false;
  }

  private boolean jj_3R_expr7_323_17_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr7_323_17_92()) {
    jj_scanpos = xsp;
    if (jj_3R_expr7_324_17_93()) {
    jj_scanpos = xsp;
    if (jj_3R_expr7_325_17_94()) {
    jj_scanpos = xsp;
    if (jj_3R_expr7_326_17_95()) {
    jj_scanpos = xsp;
    if (jj_3R_expr7_327_17_96()) {
    jj_scanpos = xsp;
    if (jj_3R_expr7_328_17_97()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_unary_522_7_51()
 {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_unary_510_7_32()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_type_399_5_18()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_unary_517_7_50()
 {
    if (jj_scan_token(67)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_unary_516_7_49()
 {
    if (jj_scan_token(72)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_unary_515_7_48()
 {
    if (jj_scan_token(84)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_expr8_314_16_87()
 {
    if (jj_scan_token(58)) return true;
    if (jj_3R_expr7_323_5_86()) return true;
    return false;
  }

  private boolean jj_3R_unary_514_7_47()
 {
    if (jj_scan_token(83)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_unary_513_7_46()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_expr7_323_5_86()
 {
    if (jj_3R_expr6_337_5_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr7_323_17_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_unary_512_7_45()
 {
    if (jj_scan_token(70)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_unary_511_7_44()
 {
    if (jj_scan_token(82)) return true;
    if (jj_3R_unary_510_7_32()) return true;
    return false;
  }

  private boolean jj_3R_unary_510_7_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unary_510_7_43()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_511_7_44()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_512_7_45()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_513_7_46()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_514_7_47()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_515_7_48()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_516_7_49()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_517_7_50()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_522_7_51()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_526_7_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_unary_510_7_43()
 {
    if (jj_scan_token(81)) return true;
    if (jj_3R_unary_510_7_32()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_type_399_5_18()) return true;
    return false;
  }

  private boolean jj_3R_expr9_305_16_85()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_expr8_314_5_84()) return true;
    return false;
  }

  private boolean jj_3R_expr8_314_5_84()
 {
    if (jj_3R_expr7_323_5_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr8_314_16_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_term_499_7_20()
 {
    if (jj_3R_unary_510_7_32()) return true;
    return false;
  }

  private boolean jj_3R_term_497_7_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_497_7_19()) {
    jj_scanpos = xsp;
    if (jj_3R_term_499_7_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_term_497_7_19()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_type_399_5_18()) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_expr10_295_16_83()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_expr_261_7_73()) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_expr10_295_5_80()) return true;
    return false;
  }

  private boolean jj_3R_expr9_305_5_82()
 {
    if (jj_3R_expr8_314_5_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr9_305_16_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expr10_295_5_80()
 {
    if (jj_3R_expr9_305_5_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr10_295_16_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_typeref_base_484_7_41()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_482_7_40()
 {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_480_7_39()
 {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_288_7_30()
 {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_287_7_29()
 {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_478_7_38()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_286_7_28()
 {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_285_7_27()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_284_7_26()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_283_7_25()
 {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_282_7_24()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_281_7_23()
 {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_280_7_22()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_471_7_37()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_279_7_21()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_470_7_36()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_469_7_35()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_468_7_34()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_opassign_op_279_5_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_opassign_op_279_7_21()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_280_7_22()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_281_7_23()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_282_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_283_7_25()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_284_7_26()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_285_7_27()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_286_7_28()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_287_7_29()) {
    jj_scanpos = xsp;
    if (jj_3R_opassign_op_288_7_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_term_497_7_14()) return true;
    if (jj_3R_opassign_op_279_5_15()) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_467_7_33()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_typeref_base_467_7_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_typeref_base_467_7_33()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_468_7_34()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_469_7_35()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_470_7_36()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_471_7_37()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_478_7_38()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_480_7_39()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_base_482_7_40()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_typeref_base_484_7_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_expr_271_7_78()
 {
    if (jj_3R_expr10_295_5_80()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_term_497_7_14()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_expr_266_7_77()
 {
    if (jj_3R_term_497_7_14()) return true;
    if (jj_3R_opassign_op_279_5_15()) return true;
    if (jj_3R_expr_261_7_73()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(79)) return true;
    if (jj_3R_typeref_409_5_17()) return true;
    return false;
  }

  private boolean jj_3R_fixedparam_typerefs_455_5_16()
 {
    if (jj_3R_typeref_409_5_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expr_261_7_76()
 {
    if (jj_3R_term_497_7_14()) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_expr_261_7_73()) return true;
    return false;
  }

  private boolean jj_3R_expr_261_7_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr_261_7_76()) {
    jj_scanpos = xsp;
    if (jj_3R_expr_266_7_77()) {
    jj_scanpos = xsp;
    if (jj_3R_expr_271_7_78()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_param_typerefs_442_13_72()
 {
    if (jj_scan_token(79)) return true;
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_fixedparam_typerefs_455_5_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_param_typerefs_442_13_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_param_typerefs_436_7_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_param_typerefs_436_7_60()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3R_param_typerefs_436_7_60()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_typeref_423_7_55()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_param_typerefs_436_7_57()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_typeref_419_7_54()
 {
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3R_typeref_415_7_53()
 {
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_typeref_410_7_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_415_7_53()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_419_7_54()) {
    jj_scanpos = xsp;
    if (jj_3R_typeref_423_7_55()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_typeref_409_5_17()
 {
    if (jj_3R_typeref_base_467_7_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_typeref_410_7_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_primary_598_7_65()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_expr_261_7_73()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_primary_594_7_64()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_expr1_388_16_113()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_type_399_5_18()
 {
    if (jj_3R_typeref_409_5_17()) return true;
    return false;
  }

  private boolean jj_3R_primary_588_7_63()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_expr1_387_16_112()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_expr1_386_16_111()
 {
    if (jj_scan_token(72)) return true;
    if (jj_3R_term_497_7_14()) return true;
    return false;
  }

  private boolean jj_3R_expr1_386_16_108()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr1_386_16_111()) {
    jj_scanpos = xsp;
    if (jj_3R_expr1_387_16_112()) {
    jj_scanpos = xsp;
    if (jj_3R_expr1_388_16_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_primary_582_7_62()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_primary_578_7_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_578_7_61()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_582_7_62()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_588_7_63()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_594_7_64()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_598_7_65()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_primary_578_7_61()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_expr2_376_17_110()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_expr1_386_5_104()) return true;
    return false;
  }

  private boolean jj_3R_expr2_375_17_109()
 {
    if (jj_scan_token(70)) return true;
    if (jj_3R_expr1_386_5_104()) return true;
    return false;
  }

  private boolean jj_3R_expr2_375_17_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expr2_375_17_109()) {
    jj_scanpos = xsp;
    if (jj_3R_expr2_376_17_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_expr1_386_5_104()
 {
    if (jj_3R_term_497_7_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expr1_386_16_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expr3_365_17_107()
 {
    if (jj_scan_token(69)) return true;
    if (jj_3R_expr2_375_5_102()) return true;
    return false;
  }

  private boolean jj_3R_args_565_8_81()
 {
    if (jj_scan_token(79)) return true;
    if (jj_3R_expr_261_7_73()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f000,0x1060000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xf80,0x7fe000,0x800000,0x2000000,0x4000000,0xf8000000,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf80,0x0,0xf80,0x0,0x0,0x0,0xf80,0xf00,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x1e21c8,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x4,0x8,0x30,0x30,0xc0,0xc0,0x700,0x700,0x2900,0x2900,0x8000,0x0,0x0,0x1e21c8,0x1e01c8,0x2000,0x662800,0x662800,0x8000,0x1e21c8,0x2000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[87];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 29; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 87; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 11; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
