/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package cn.edu.nwafu.parser;
import cn.edu.nwafu.ast.*;
import cn.edu.nwafu.type.*;
import java.util.*;
import cn.edu.nwafu.utils.ErrorHandler;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffff000L) != 0L)
         {
            jjmatchedKind = 40;
            return 1;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 33;
         return -1;
      case 1:
         if ((active0 & 0xff7dfff000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x82000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xfe7dff7000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x100008000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0xee69f64000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x1014093000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0xea29b20000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x440444000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x2821000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0xc208b20000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x2020000000L) != 0L)
            return 1;
         if ((active0 & 0x801000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 35:
         return jjStopAtPos(0, 7);
      case 37:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x404000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 77);
      case 41:
         return jjStopAtPos(0, 78);
      case 42:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 43:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x20000L);
      case 44:
         return jjStopAtPos(0, 79);
      case 45:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x440000L);
      case 46:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 47:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 56);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x4020000000000000L, 0x20L);
      case 61:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x2040000000000000L, 0x10L);
      case 63:
         return jjStopAtPos(0, 55);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 94:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x810402000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xa0000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4280000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4002008000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8008924000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1040000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 124:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x208000000000000L, 0x0L);
      case 126:
         return jjStopAtPos(0, 84);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 43:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 45:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 60:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40006000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000800000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c8000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x1900411000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x102000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x48041000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800410000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x15000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1200200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x420000000L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 1);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0xa000200000L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000040000L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x808100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200020000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8020000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800100000L);
      case 107:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 1);
         break;
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4200200000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         break;
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 1);
         break;
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x801000000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 1);
         break;
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 1);
         break;
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(3, 4); }
                  else if (curChar == 48)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAddStates(5, 8); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 39)
                     { jjAddStates(12, 13); }
                  break;
               case 33:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(39, 40); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 39)
                     { jjAddStates(12, 13); }
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 8); }
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 15:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 18:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 19:
                  if (curChar == 34 && kind > 43)
                     kind = 43;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 20); }
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 24:
                  if (curChar == 10)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar != 48)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(5, 8); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 30:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 32:
                  if (curChar == 47)
                     { jjAddStates(3, 4); }
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 35:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 36:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 39:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 40:
                  if (curChar == 42)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 41:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(42, 40); }
                  break;
               case 42:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(42, 40); }
                  break;
               case 43:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
               case 29:
               case 31:
                  if (curChar != 85)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if (curChar == 76 && kind > 41)
                     kind = 41;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(30, 32); }
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(33, 36); }
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 27:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 34:
                  { jjAddStates(14, 16); }
                  break;
               case 39:
                  { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 41:
               case 42:
                  { jjCheckNAddTwoStates(42, 40); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(9, 11); }
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(14, 16); }
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 41:
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(42, 40); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x600L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      default :
         return 3;
   }
   return 3;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\166\157\151\144", "\143\150\141\162", "\163\150\157\162\164", "\151\156\164", 
"\154\157\156\147", "\163\164\162\165\143\164", "\165\156\151\157\156", "\145\156\165\155", 
"\163\164\141\164\151\143", "\145\170\164\145\162\156", "\143\157\156\163\164", 
"\163\151\147\156\145\144", "\165\156\163\151\147\156\145\144", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\167\150\151\154\145", 
"\144\157", "\146\157\162", "\162\145\164\165\162\156", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\147\157\164\157", "\164\171\160\145\144\145\146", 
"\151\155\160\157\162\164", "\163\151\172\145\157\146", null, null, null, null, "\75", "\53\75", "\55\75", 
"\52\75", "\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", 
"\77", "\72", "\174\174", "\46\46", "\76", "\74", "\76\75", "\74\75", "\75\75", 
"\41\75", "\174", "\136", "\46", "\76\76", "\74\74", "\53", "\55", "\52", "\57", "\45", 
"\133", "\135", "\50", "\51", "\54", "\56\56\56", "\53\53", "\55\55", "\41", "\176", 
"\56", "\55\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   3, 4, 5, 33, 38, 27, 30, 31, 5, 16, 17, 19, 7, 9, 34, 35, 
   37, 16, 17, 21, 19, 28, 29, 5, 30, 31, 5, 40, 41, 43, 10, 11, 
   13, 18, 20, 22, 25, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xe00L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[44];
    private final int[] jjstateSet = new int[2 * 44];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
