/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package cn.edu.nwafu.parser;
import cn.edu.nwafu.ast.*;
import cn.edu.nwafu.type.*;
import java.util.*;
import cn.edu.nwafu.utils.*;
import cn.edu.nwafu.entity.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffff000L) != 0L)
         {
            jjmatchedKind = 45;
            return 1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x800000L) != 0L)
            return 54;
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x80000000L) != 0L)
            return 27;
         return -1;
      case 1:
         if ((active0 & 0x3fdf7fbf000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x208040000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x3f9f7ff7000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x400008000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x3b9a7de4000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x4050213000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x3a8a6cc0000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x1101124000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0xa084000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x30822cc0000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x8080000000L) != 0L)
            return 1;
         if ((active0 & 0x2004000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2004000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 35:
         return jjStopAtPos(0, 7);
      case 37:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 38:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102L);
      case 40:
         return jjStopAtPos(0, 51);
      case 41:
         return jjStopAtPos(0, 55);
      case 42:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x8000000L);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x2000040000000000L, 0x110000000L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 59);
      case 59:
         return jjStopAtPos(0, 54);
      case 60:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x81010L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 62:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40820L);
      case 63:
         return jjStopAtPos(0, 70);
      case 91:
         return jjStopAtPos(0, 89);
      case 93:
         return jjStopAtPos(0, 90);
      case 94:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2041002000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x280040000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10a00000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400020000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10008008000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20022484000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4100000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 57);
      case 124:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x84L);
      case 125:
         return jjStopAtPos(0, 58);
      case 126:
         return jjStopAtPos(0, 94);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 43:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 45:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 60:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 62:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100006000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10020000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4308000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6401051000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         break;
      case 46:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 61:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x402000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x120101000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2001010000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000024000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x54000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x4800800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1080020000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x28000800000L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100000L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000004000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20080000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000400000L);
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800800000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 1);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         break;
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 1);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 1);
         break;
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2004000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 1);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 1);
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 44);
         break;
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(17, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 65;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(60, 61); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  else if (curChar == 47)
                     { jjAddStates(10, 11); }
                  else if (curChar == 46)
                     { jjCheckNAdd(27); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 39)
                     { jjAddStates(15, 16); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddStates(17, 19); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddStates(20, 23); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 6:
                  if (curChar == 39)
                     { jjAddStates(15, 16); }
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 8); }
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 15:
                  if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 18:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 19:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 24:
                  if (curChar == 10)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 46)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar != 46)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(38, 31); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(42, 31); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 31); }
                  break;
               case 47:
                  if (curChar != 48)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(20, 23); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(37, 39); }
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 53:
                  if (curChar == 47)
                     { jjAddStates(10, 11); }
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 57:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 58:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 60:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if (curChar == 42)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 62:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(63, 61); }
                  break;
               case 63:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(63, 61); }
                  break;
               case 64:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
               case 50:
               case 52:
                  if (curChar != 85)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if (curChar == 76 && kind > 46)
                     kind = 46;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(46, 48); }
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(49, 52); }
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 31:
                  if ((0x5000000050L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(55, 56); }
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(57, 58); }
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(59, 60); }
                  break;
               case 48:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(37, 39); }
                  break;
               case 55:
                  { jjAddStates(0, 2); }
                  break;
               case 60:
                  { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 62:
               case 63:
                  { jjCheckNAddTwoStates(63, 61); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 60:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 62:
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(63, 61); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x600L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      default :
         return 3;
   }
   return 3;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\166\157\151\144", "\143\150\141\162", "\163\150\157\162\164", "\151\156\164", 
"\154\157\156\147", "\146\154\157\141\164", "\144\157\165\142\154\145", 
"\163\164\162\165\143\164", "\165\156\151\157\156", "\145\156\165\155", "\163\164\141\164\151\143", 
"\145\170\164\145\162\156", "\143\157\156\163\164", "\163\151\147\156\145\144", 
"\165\156\163\151\147\156\145\144", "\151\146", "\145\154\163\145", "\163\167\151\164\143\150", 
"\143\141\163\145", "\144\145\146\141\165\154\164", "\167\150\151\154\145", "\144\157", 
"\146\157\162", "\162\145\164\165\162\156", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\147\157\164\157", "\164\171\160\145\144\145\146", 
"\151\155\160\157\162\164", "\163\151\172\145\157\146", "\55\55\55", 
"\74\105\130\101\103\124\137\120\101\122\101\115\137\116\101\115\105\76", "\74\146\157\162\142\151\144\144\145\156\76", null, null, null, null, null, 
null, "\50", "\75", "\54", "\73", "\51", "\56\56\56", "\173", "\175", "\72", 
"\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", "\136\75", 
"\74\74\75", "\76\76\75", "\77", "\174\174", "\46\46", "\76", "\74", "\76\75", "\74\75", 
"\75\75", "\41\75", "\174", "\136", "\46", "\76\76", "\74\74", "\53", "\55", "\52", 
"\57", "\45", "\133", "\135", "\53\53", "\55\55", "\41", "\176", "\56", "\55\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   55, 56, 58, 33, 34, 39, 40, 43, 44, 31, 54, 59, 16, 17, 19, 7, 
   9, 3, 4, 5, 48, 51, 52, 5, 16, 17, 21, 19, 27, 28, 31, 35, 
   36, 31, 43, 44, 31, 49, 50, 5, 51, 52, 5, 61, 62, 64, 10, 11, 
   13, 18, 20, 22, 25, 29, 30, 37, 38, 41, 42, 45, 46, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 65; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffbfffffffff001L, 0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xe00L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[65];
    private final int[] jjstateSet = new int[2 * 65];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
